from openpyxl import load_workbook
import hashlib

import hashlib
def generate_create_table_sql(row):
    """Generate SQL for creating a table based on the row."""
    table_name = row['Table Name']
    column_def = row['Column Name']
    constraint = row['Constraint']

    # Parse columns
    columns = column_def.split(",\n")  # Split by newlines
    columns = [col.strip().replace(":", " ") for col in columns]  # Convert "ID: INT" -> "ID INT"

    # Handle constraints
    if constraint and "PK" in constraint:
        constraint_col = constraint.split(":")[0].strip()
        for i, col in enumerate(columns):
            if col.startswith(constraint_col):
                columns[i] += " PRIMARY KEY NOT NULL"

    # Generate SQL
    sql = f"CREATE TABLE {table_name} (\n    {',\n    '.join(columns)}\n);"
    return sql, table_name
def compute_table_structure_hash(column_def):
    """
    Compute a hash for table properties while handling cases where INTEGER is defined without length.
    Args:
        column_def (str): Column definitions as a string (e.g., "ID:INTEGER,\nNAME:VARCHAR,\nAGE:INTEGER").
    Returns:
        str: SHA-256 hash of the sorted and normalized column definitions.
    """
    # Parse and normalize column definitions
    columns = column_def.split(",\n")  # Split by newlines
    parsed_columns = []

    for col in columns:
        # Split the column definition into name and type
        col_name, col_type = map(str.strip, col.split(":"))
        
        # Normalize the type: remove length for INTEGER
        if col_type.upper().startswith("INTEGER"):
            col_type = "INTEGER"  # Strip any length specification like INTEGER(10)
        
        # Reconstruct the normalized column definition
        parsed_columns.append(f"{col_name}:{col_type}")

    # Sort columns alphabetically by column name
    sorted_columns = sorted(parsed_columns, key=lambda x: x.split(":")[0].lower())

    # Concatenate sorted column definitions
    structure_string = "".join(sorted_columns)

    # Compute and return the hash
    return hashlib.sha256(structure_string.encode('utf-8')).hexdigest()

def compute_signature_with_order(values, selection_order):
    """
    Compute a hash signature for values based on a specific selection order.
    Args:
        values (str): String of values in a structured format (e.g., JSON-like or list of lists).
                      Example: "[[1, 'RED', '353XXXX'], [2, 'GREEN', '353XXXY']]"
        selection_order (str): Comma-separated string specifying the selection order.
                               Example: "ID,NAME,PHONE"
    Returns:
        str: SHA-256 hash representing the reordered values' signature.
    """
    try:
        # Parse the values and selection order
        parsed_values = eval(values)  # Converts string representation to Python list
        selection_order = [col.strip() for col in selection_order.split(",")]

        # Ensure values match the selection order
        if len(parsed_values[0]) != len(selection_order):
            raise ValueError("Number of columns in 'Values' does not match the 'Selection Order'.")

        # Normalize data based on selection order
        normalized_data = []
        for row in parsed_values:
            # Reorder row values based on the selection order
            reordered_row = [str(row[selection_order.index(col)]) for col in selection_order]
            normalized_data.append("|".join(reordered_row))  # Join reordered values with "|"

        # Join all rows into a single string
        data_string = "\n".join(normalized_data)

        # Compute and return the hash
        return hashlib.sha256(data_string.encode('utf-8')).hexdigest()

    except Exception as e:
        print(f"Error computing signature: {values}, {selection_order}. Exception: {e}")
        return None
def precompute_signatures_from_excel(file_path, sheet_name):
    """
    Compute and save hash signatures based on values in an Excel sheet.
    Args:
        file_path (str): Path to the Excel file.
        sheet_name (str): Name of the sheet to update.
    """
    # Load the workbook and sheet
    workbook = load_workbook(file_path)
    sheet = workbook[sheet_name]

    # Identify column indexes
    headers = [cell.value for cell in sheet[1]]  # First row as headers
    function_col = headers.index("Function") + 1
    table_name_col = headers.index("Table Name") + 1
    values_col = headers.index("Values") + 1
    computed_signature_col = headers.index("Computed Signature") + 1

    # Iterate through rows
    for row in range(2, sheet.max_row + 1):  # Skip header row
        function = sheet.cell(row=row, column=function_col).value

        # Process rows with function 'Check Table Records'
        if function == "Check Table Records":
            values = sheet.cell(row=row, column=values_col).value

            if values:
                # Parse values and compute the hash
                computed_signature = compute_signature_from_values(values)

                # Save the computed signature
                sheet.cell(row=row, column=computed_signature_col, value=computed_signature)
            else:
                print(f"Row {row}: 'Values' is empty, skipping.")

    # Save the updated workbook
    workbook.save(file_path)
    print(f"Updated Excel file saved at {file_path}")


def compute_signature_from_values(values):
    """
    Compute a hash signature for values provided in the Excel sheet.
    Args:
        values (str): String of values in a structured format (e.g., JSON-like or list of lists).
                      Example: "[[1, 'RED', '353XXXX'], [2, 'GREEN', '353XXXY']]"
    Returns:
        str: SHA-256 hash representing the values' signature.
    """
    # Parse the values (assumes they are JSON-like; use eval for simplicity here)
    try:
        parsed_values = eval(values)  # Converts string representation to Python list
    except Exception as e:
        print(f"Error parsing values: {values}. Exception: {e}")
        return None

    # Normalize the data (e.g., convert to strings and join rows)
    normalized_data = []
    for row in parsed_values:
        row_string = "|".join(map(str, row))  # Convert each value to a string and join with "|"
        normalized_data.append(row_string)

    # Join all rows into a single string
    data_string = "\n".join(normalized_data)

    # Compute and return the hash
    return hashlib.sha256(data_string.encode('utf-8')).hexdigest()
