import sys
import pandas as pd
import hashlib

class ExcelOperationFramework:
    def __init__(self, excel_sheet_name, tab_name, function_name):
        """
        Initialize the framework with an Excel file, tab name, and function name.

        Args:
            excel_sheet_name (str): Path to the Excel file.
            tab_name (str): Name of the tab (sheet) in the Excel file.
            function_name (str): The name of the function to execute.
        """
        self.excel_sheet_name = excel_sheet_name
        self.tab_name = tab_name
        self.function_name = function_name

    def execute(self):
        """
        Execute the specified function on the Excel tab.

        Returns:
            The result of the function applied to the data.
        """
        try:
            # Load the Excel sheet
            data = pd.read_excel(self.excel_sheet_name, sheet_name=self.tab_name)

            # Dynamically resolve the function name
            function = globals().get(self.function_name)
            if not function:
                raise ValueError(f"Function '{self.function_name}' not found.")

            # Execute the function on the data
            result = function(data)

            # Return the result
            return result
        except Exception as e:
            print(f"Error: {e}")
            return None

# Example operation functions
def compute_sha256(data):
    """Compute SHA-256 hash for each row."""
    def hash_row(row):
        row_data = "|".join(str(value) for value in row)
        return hashlib.sha256(row_data.encode('utf-8')).hexdigest()

    data['SHA-256'] = data.apply(hash_row, axis=1)
    return data

def count_rows(data):
    """Count the number of rows in the sheet."""
    return len(data)

def summarize_columns(data):
    """Summarize the columns by showing their names and types."""
    return data.dtypes.to_dict()

def filter_rows(data):
    """Filter rows where a specific column value meets a condition."""
    return data[data['Column1'] == 'A']

if __name__ == "__main__":
    # Parse command-line arguments
    if len(sys.argv) != 4:
        print("Usage: python excel_operations.py <excel_file> <sheet_name> <function_name>")
        sys.exit(1)

    excel_file = sys.argv[1]
    sheet_name = sys.argv[2]
    function_name = sys.argv[3]

    # Run the framework
    framework = ExcelOperationFramework(excel_file, sheet_name, function_name)
    result = framework.execute()

    if result is not None:
        if isinstance(result, pd.DataFrame):
            print("Operation Result:")
            print(result)
        else:
            print(f"Operation Result: {result}")
