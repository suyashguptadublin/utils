Compute a SHA_256 from a list 
I want to have a function that will generate a SHA_256 from a list , preserving the order of the items in the list so that the order will always provide a consistent SHA_256 if the items in the list are the same or different order. 
The function will take a list of tuples consisting of the index key and the value.
An example might be a Colum name and a value such as (TestCol001,46).
This will allow the SHA_256 function generator to sort the list  based on the index identifier as the order and thus give consistent SHA_256 result for the list regardless of the order it is supplied in.
if __name__ == "__main__":
    # Define a list of tuples (key, value)
    input_list = [
        ("TestCol001", "Integer32"),
        ("TestCol003", "Float64"),
        ("TestCol002", "Varchar(20)")
    ]

    # Compute SHA-256 hash
    result_hash = compute_sha256_from_list(input_list)
    print("SHA-256 Hash:", result_hash)
Table creation exampleTuple(ColumName,ColumnAttribute)
(TestCol001,Integer32)
(TestCol002,Varchar(20))
(TestCol003,Float64)

import hashlib

def compute_sha256_from_list(input_list):
    """
    Compute a consistent SHA-256 hash from a list of tuples.
    
    Args:
        input_list (list of tuple): A list of tuples where each tuple consists of
                                    an index (key) and a value.
                                    Example: [(TestCol001, 46), (TestCol002, 20)]
    
    Returns:
        str: A SHA-256 hash string.
    """
    # Step 1: Sort the list of tuples by the key (first item in each tuple)
    sorted_list = sorted(input_list, key=lambda x: x[0])
    
    # Step 2: Convert the sorted list into a string representation
    # Ensure consistent string format for hashing
    concatenated_string = "|".join(f"{key}:{value}" for key, value in sorted_list)
    
    # Step 3: Compute the SHA-256 hash
    sha256_hash = hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()
    
    return sha256_hash

# Example Usage
if __name__ == "__main__":
    # Define a list of tuples (key, value)
    input_list = [
        ("TestCol001", "Integer32"),
        ("TestCol003", "Float64"),
        ("TestCol002", "Varchar(20)")
    ]

    # Compute SHA-256 hash
    result_hash = compute_sha256_from_list(input_list)
    print("SHA-256 Hash:", result_hash)

import sys
import pandas as pd
import hashlib

class ExcelOperationFramework:
    def __init__(self, excel_sheet_name, tab_name, function_name):
        """
        Initialize the framework with an Excel file, tab name, and function name.

        Args:
            excel_sheet_name (str): Path to the Excel file.
            tab_name (str): Name of the tab (sheet) in the Excel file.
            function_name (str): The name of the function to execute.
        """
        self.excel_sheet_name = excel_sheet_name
        self.tab_name = tab_name
        self.function_name = function_name

    def execute(self):
        """
        Execute the specified function on the Excel tab.

        Returns:
            The result of the function applied to the data.
        """
        try:
            # Load the Excel sheet
            data = pd.read_excel(self.excel_sheet_name, sheet_name=self.tab_name)

            # Dynamically resolve the function name
            function = globals().get(self.function_name)
            if not function:
                raise ValueError(f"Function '{self.function_name}' not found.")

            # Execute the function on the data
            result = function(data)

            # Return the result
            return result
        except Exception as e:
            print(f"Error: {e}")
            return None

# Example operation functions
def compute_sha256(data):
    """Compute SHA-256 hash for each row."""
    def hash_row(row):
        row_data = "|".join(str(value) for value in row)
        return hashlib.sha256(row_data.encode('utf-8')).hexdigest()

    data['SHA-256'] = data.apply(hash_row, axis=1)
    return data

def count_rows(data):
    """Count the number of rows in the sheet."""
    return len(data)

def summarize_columns(data):
    """Summarize the columns by showing their names and types."""
    return data.dtypes.to_dict()

def filter_rows(data):
    """Filter rows where a specific column value meets a condition."""
    return data[data['Column1'] == 'A']

if __name__ == "__main__":
    # Parse command-line arguments
    if len(sys.argv) != 4:
        print("Usage: python excel_operations.py <excel_file> <sheet_name> <function_name>")
        sys.exit(1)

    excel_file = sys.argv[1]
    sheet_name = sys.argv[2]
    function_name = sys.argv[3]

    # Run the framework
    framework = ExcelOperationFramework(excel_file, sheet_name, function_name)
    result = framework.execute()

    if result is not None:
        if isinstance(result, pd.DataFrame):
            print("Operation Result:")
            print(result)
        else:
            print(f"Operation Result: {result}")
