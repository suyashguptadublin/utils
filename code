def generate_insert_sql(row):
    """
    Generate a list of SQL INSERT statements for inserting data into a table.
    """
    table_name = row['Table Name']
    column_def = row['Column Name']
    values = row['Values']

    # Parse column names
    columns = column_def.split(",\n")  # Split by newlines
    columns = [col.strip() for col in columns]  # Remove extra spaces

    # Parse values (assuming JSON-like format)
    values_list = eval(values)  # Safely evaluate string into a Python list

    # Generate individual SQL INSERT statements
    sql_statements = []
    for row_values in values_list:
        formatted_values = ", ".join(
            [f"'{value}'" if isinstance(value, str) else str(value) for value in row_values]
        )
        sql = f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({formatted_values});"
        sql_statements.append(sql)

    return sql_statements, table_name
def execute_sql_query(sql, operation_type=None, type=None):
    with teradata_connection(host, user, password, DB_NAME) as cursor:
        try:
            if operation_type == "insert":
                if isinstance(sql, list):
                    # Execute each SQL statement individually
                    for query in sql:
                        cursor.execute(query)
                        print(f"Executed: {query}")
                else:
                    raise ValueError("INSERT operation requires a list of SQL statements.")
            else:
                cursor.execute(sql)
                if type:
                    columns = cursor.fetchall()
                    structure_string = "\n".join([f"{col[0]}:{col[1]}({col[2]},{col[3]},{col[4]})" for col in columns])
                    return hashlib.sha256(structure_string.encode()).hexdigest()

        except Exception as ex:
            print(traceback.format_exc())
            print(ex)




import pandas as pd
import hashlib
import json
import os
import teradatasql
from dotenv import load_dotenv
from database_context import teradata_connection
from generate_sql import compute_table_structure_sql, generate_insert_sql, generate_create_table_sql
import traceback

load_dotenv()
password = os.getenv('SECRET_PASSWORD')
user = os.getenv('TERADATAUSERNAME')
host = os.getenv('HOSTNAME')
DB_NAME = os.getenv('TERADATNBASENAME')

def execute_sql_query(sql, operation_type= None, type=None):
    with teradata_connection(host, user, password, DB_NAME) as cursor:
        try:
            if operation_type =="insert":
                for i in sql:
                    cursor.execute(i)
            else:
                cursor.execute(sql)
            if type:
                columns = cursor.fetchall()
                structure_string = "\n".join([f"{col[0]}:{col[1]}({col[2]},{col[3]},{col[4]})" for col in columns])
                return hashlib.sha256(structure_string.encode()).hexdigest()

        except Exception as ex:
            print(traceback.format_exc())
            print(ex)

# Function to process operations
def process_validation(validation_df):
    """Process validation tasks using Teradata."""
    for _, row in validation_df.iterrows():
        #print('test', _, row)
        function = row['Function']
        table_name = row['Table Name']
        column_def = row['Column Name']
        values = row['Values']
        expected_checksum = row['Expected Checksum']
        checksum_type = row['Checksum Type']
        #print(function, table_name, column_def, values, expected_checksum, checksum_type)

        try:
            if function == "Create Table":
                get_sql_query, table_name = generate_create_table_sql(row)
                #execute_sql_query(get_sql_query)
                #schema_sql = compute_table_structure_sql(table_name) 
                #print(schema_sql)
                #hash_string = execute_sql_query(schema_sql, True)
                #print(hash_string)
                 
            elif function == "Check Table":
                # Check Table logic
                if checksum_type == "Structure":
                    schema_sql = compute_table_structure_sql(table_name) 
                    current_checksum  = execute_sql_query(schema_sql, True)
                    if current_checksum == expected_checksum:
                        print('Schema Matched')
                    else:
                        print("Schema mismatched")                

            elif function == "Insert Table":
                get_insert_sqls, table_name = generate_insert_sql(row)
                print(get_insert_sqls, table_name)
                execute_sql_query(get_insert_sqls, operation_type="insert")



                # elif checksum_type == "Data":
                #     current_checksum = compute_data_checksum(cursor, table_name)
                # else:
                #     raise ValueError("Unknown checksum type.")

        #         if current_checksum == expected_checksum:
        #             print(f"{checksum_type} checksum for {table_name} matches.")
        #         else:
        #             print(f"{checksum_type} checksum for {table_name} does NOT match!")
        #             print(f"Expected: {expected_checksum}, Got: {current_checksum}")

        #     elif function == "DELETE":
        #         # Delete Data logic
        #         sql = f"DELETE FROM {table_name}"
        #         cursor.execute(sql)
        #         print(f"Data deleted from {table_name}.")

        #     elif function == "DROP":
        #         # Drop Table logic
        #         sql = f"DROP TABLE {table_name}"
        #         cursor.execute(sql)
        #         print(f"Table {table_name} dropped.")

        except Exception as e:
            print(f"Error processing {function} for table {table_name}: {e}")
            print(traceback.format_exc())


# Functions to compute checksums

def compute_data_checksum(connection, table_name):
    """Compute SHA-256 checksum for table data."""
    cursor = connection.cursor()
    cursor.execute(f"SELECT * FROM {table_name}")
    rows = cursor.fetchall()
    data_str = "|".join([str(row) for row in rows])
    return hashlib.sha256(data_str.encode('utf-8')).hexdigest()


excel_file = "validations.xlsx"
excel_path = "C:\\Products\\projects\\python\\database_operations\\validations.xlsx"
validation_df = pd.read_excel(excel_path, sheet_name="Validations")




# Process validation operations
try:
    process_validation(validation_df)
except Exception as ex:
    print(ex, traceback.format_exc())



# print(user, host,password)
# with teradata_connection(user,password, host) as cursor:
#     # Get the current database
#     cursor.execute("SELECT DATABASE")
#     print("Current Database:", cursor.fetchone()[0])

#     # List all tables in a specific database
#     cursor.execute("SELECT TableName, TableKind FROM DBC.Tables WHERE DatabaseName = 'ddewd06s';")
#     print("Tables in 'ddewd06s':")
#     for row in cursor.fetchall():
#         print(row[0], row[1])

